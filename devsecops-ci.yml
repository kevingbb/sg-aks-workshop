# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
  ACRConnectionName: 'akskhacr'
  ACRLoginServer: 'akskhacr.azurecr.io'
  AquaImage: 'registry.aquasec.com/scanner:4.2'
  AquaManagementConsoleServiceConnection: 'aqua-sec'
  AquaServiceConnection: 'aquasec'
  BuildConfiguration: 'Release'
  SonarCloudEndpoint: 'sonarcloud'
  SonarCloudOrganization: 'kevingbb'
  SonarCloudProjectKey: 'kevingbb'
  SonarCloudProjectName: 'imageclassifier.kevingbb'
  WebRepository: 'imageclassifierweb'
  WorkerRepository: 'imageclassifierworker'

jobs:
- job: JobOne
  displayName: JobOne

  pool:
    vmImage: 'windows-latest'

  steps:
  - task: SonarCloudPrepare@1
    displayName: 'Prepare analysis on SonarCloud'
    inputs:
      SonarCloud: $(SonarCloudEndpoint)
      organization: $(SonarCloudOrganization)
      projectKey: $(SonarCloudProjectKey)
      projectName: $(SonarCloudProjectName)
    enabled: false

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 3.1.11'
    inputs:
      version: 3.1.11

  - task: UsePythonVersion@0
    displayName: 'Use Python 3.8'
    inputs:
      versionSpec: 3.8

  - task: CmdLine@2
    displayName: 'Detect Secrets'
    inputs:
      script: |
        pip install detect-secrets
        detect-secrets scan --custom-plugins azure_storage_key.py

  - task: CredScan@2
    displayName: 'Run CredScan'
    inputs:
      toolMajorVersion: V2
      verboseOutput: true
      batchSize: 20

  - task: SdtReport@1
    displayName: 'Create Security Analysis Report'
    inputs:
      AllTools: false
      BinSkim: false
      CredScan: true
      MSRD: false
      RoslynAnalyzers: false
      TSLint: false
      ToolLogsNotFoundAction: 'Standard'

  - task: PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs'
    inputs:
      ArtifactName: 'CodeAnalysisLogs'
      ArtifactType: 'Container'
      AllTools: false
      AntiMalware: false
      BinSkim: false
      CredScan: true
      MSRD: false
      RoslynAnalyzers: false
      TSLint: false
      ToolLogsNotFoundAction: 'Standard'

  - task: PostAnalysis@1
    displayName: 'Post Analysis'
    inputs:
      AllTools: false
      BinSkim: false
      CredScan: true
      RoslynAnalyzers: false
      TSLint: false
      ToolLogsNotFoundAction: 'Standard'

  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: '**/*.csproj'
      feedsToUse: 'select'
      vstsFeed: 'f51968db-4678-4f1c-bd09-e59ab8cc5924/ff921681-517d-4e23-9cac-cf9714535c1b'
      includeNuGetOrg: false

  - task: CmdLine@2
    displayName: 'Download Whitesource agent'
    inputs:
      script: 'curl -LJO https://unified-agent.s3.amazonaws.com/wss-unified-agent.jar'
    enabled: false

  - task: CmdLine@2
    displayName: 'Run Whitesource'
    inputs:
      script: |
        java -jar wss-unified-agent.jar -c whitesource.config -apiKey $(whitesource_api_key)
        exit $?
    enabled: false

  - task: WhiteSource@20
    displayName: WhiteSource
    inputs:
      projectName: '$(Build.BuildId)'
    enabled: false

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: '**/*.csproj'
      arguments: '--configuration $(BuildConfiguration)'

  - task: SonarCloudAnalyze@1
    displayName: 'Run Code Analysis'
    enabled: false

  - task: SonarCloudPublish@1
    displayName: 'Publish Quality Gate Result'
    enabled: false

  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: publish
      publishWebProjects: True
      arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
      zipAfterPublish: True

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact'
    condition: succeededOrFailed()

  - task: Docker@2
    displayName: 'Build Web'
    inputs:
      containerRegistry: $(ACRConnectionName)
      repository: '$(WebRepository)'
      command: build
      Dockerfile: app/Classifier.Web/Dockerfile
    enabled: false

  - task: Docker@2
    displayName: 'Build Worker'
    inputs:
      containerRegistry: $(ACRConnectionName)
      repository: '$(WorkerRepository)'
      command: build
      Dockerfile: app/Classifier.Worker/Dockerfile
    enabled: false

  - task: CmdLine@2
    displayName: 'Tag and Push Image to ACR'
    inputs:
      script: |
        docker tag $(ACRLoginServer)/$(WebRepository):$(Build.BuildId) $(ACRLoginServer)/$(WebRepository):latest
        docker push $(ACRLoginServer)/$(WebRepository):latest
        docker tag $(ACRLoginServer)/$(WorkerRepository):$(Build.BuildId) $(ACRLoginServer)/$(WorkerRepository):latest
        docker push $(ACRLoginServer)/$(WorkerRepository):latest
    enabled: false
